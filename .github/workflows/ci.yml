name: ci

on:
  push:
    paths:
      - '.github/workflows/ci.yml'
      - '3rdparty/include/**'
      - 'include/**'
      - 'source/**'
      - 'sample/**'
      - 'cmake/**'
      - 'CMakeLists.txt'
      - '*.sln'
  pull_request:
    paths:
      - '.github/workflows/ci.yml'
      - '3rdparty/include/**'
      - 'include/**'
      - 'source/**'
      - 'sample/**'
      - 'cmake/**'
      - 'CMakeLists.txt'
      - '*.sln'
  workflow_dispatch:

jobs:

  meta:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set_tag.outputs.tag }}
      prerelease: ${{ steps.set_pre.outputs.prerelease }}
    steps:
      - uses: actions/checkout@v3
        with:
          path: temp
      - name: Fetch history
        if: ${{ !startsWith(github.ref, 'refs/pull/') }}
        run: |
          git init
          cp $GITHUB_WORKSPACE/temp/.git/config ./.git
          rm -rf $GITHUB_WORKSPACE/temp
          # git config remote.origin.fetch '+refs/*:refs/*'
          git fetch --filter=tree:0 # --update-head-ok
          git reset --hard origin/$(git branch --show-current) || true
          git checkout ${{ github.ref_name }}

      - id: set_tag
        run: |
          ${{ startsWith(github.ref, 'refs/pull/') && 'cd temp' || '' }}
          echo tag=$(git describe --tags --match "v*" ${{ github.ref }} || git rev-parse --short HEAD) | tee -a $GITHUB_OUTPUT
          exit ${PIPESTATUS[0]}

      - id: set_pre
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: |
          if [[ '${{ steps.set_tag.outputs.tag }}' =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo prerelease=false | tee -a $GITHUB_OUTPUT
          else
            echo prerelease=true | tee -a $GITHUB_OUTPUT
          fi
      - if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: |
          this_tag=${{ steps.set_tag.outputs.tag }}
          if [[ '${{ steps.set_pre.outputs.prerelease }}' != 'false' ]]; then
            last_tag=$(git describe --tags --match "v*" --abbrev=0 --exclude='${{ steps.set_tag.outputs.tag }}')
          else
            last_tag=$(git describe --tags --match "v*" --abbrev=0 --exclude='${{ steps.set_tag.outputs.tag }}' --exclude='*-*')
          fi
          echo >> CHANGELOG.md
          echo "**Full Changelog**: [$last_tag -> $this_tag](https://github.com/MaaAssistantArknights/MaaAssistantArknights/compare/${last_tag}...${this_tag})" >> CHANGELOG.md
      - uses: actions/upload-artifact@v3
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        with:
          name: changelog
          path: CHANGELOG.md

  windows:
    needs: meta
    strategy:
      matrix:
        include:
          - msbuild_target: x64
            lowercase_target: x64
          - msbuild_target: ARM64
            lowercase_target: arm64
    env:
      MAABUILDER_TARGET_PLATFORM: ${{ matrix.msbuild_target }}
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      - name: Bootstrap MaaDeps
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 maadeps-download.py ${{ matrix.lowercase_target }}-windows

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1
      - name: Build MaaSample
        run: |
          MSBUILD MAA.sln /t:rebuild /p:Configuration="Release" /p:Platform="${{ matrix.msbuild_target }}" /m

      - uses: actions/upload-artifact@v3
        with:
          name: MAA-win-${{ matrix.lowercase_target }}
          path: x64/Release

  ubuntu:
    needs: meta
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [aarch64, x86_64]
    steps:
      - uses: actions/checkout@v3

      - name: Install cross compile toolchains
        if: ${{ matrix.arch != 'x86_64' }}
        run: |
          sudo apt-get update
          sudo apt-get install g++-12-aarch64-linux-gnu g++-12-aarch64-linux-gnu

      - name: Setup ccache
        uses: Chocobo1/setup-ccache-action@v1
        with:
          remove_stale_cache: false

      - name: Bootstrap MaaDeps
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 maadeps-download.py ${{ matrix.arch == 'x86_64' && 'x64' || 'arm64' }}-linux

      - name: Build MAA
        env:
          CC: ${{ matrix.arch == 'x86_64' && 'ccache gcc-12' || 'ccache aarch64-linux-gnu-gcc-12' }}
          CXX: ${{ matrix.arch == 'x86_64' && 'ccache g++-12' || 'ccache aarch64-linux-gnu-g++-12' }}
        run: |
          mkdir -p build
          cmake -B build \
            -DMAADEPS_TRIPLET='maa-${{ matrix.arch == 'x86_64' && 'x64' || 'arm64' }}-linux' \
            -DINSTALL_THIRD_LIBS=ON \
            -DINSTALL_RESOURCE=ON \
            -DINSTALL_PYTHON=ON \
            -DMAA_VERSION='${{ needs.meta.outputs.tag }}'
          cmake --build build --parallel $(nproc --all)

          mkdir -p install
          cmake --install build --prefix install

      - name: tar files
        run: |
          mkdir -p release
          cd install
          tar czvf $GITHUB_WORKSPACE/release/MAA-${{ needs.meta.outputs.tag }}-linux-${{ matrix.arch }}.tar.gz .

      - uses: actions/upload-artifact@v3
        with:
          name: MAA-linux-${{ matrix.arch }}
          path: 'release/*.tar.gz'

  macOS:
    needs: meta
    runs-on: macos-13
    strategy:
      matrix:
        arch: [arm64, x86_64]
    steps:
      - uses: actions/checkout@v3
      - name: Install Dependencies
        run: brew install ninja
      - name: Bootstrap MaaDeps
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          [[ ${{ matrix.arch }} = "arm64" ]] && triplet="arm64-osx" || triplet="x64-osx"
          python3 maadeps-download.py ${triplet}
      - name: Configure MaaCore
        run: |
          cmake -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES='${{ matrix.arch }}' -DMAA_VERSION='${{ needs.meta.outputs.tag }}'
      - name: Build MaaCore
        run: |
          cmake --build build
          cmake --install build --prefix install
      - uses: actions/upload-artifact@v3
        with:
          name: MAACore-macos-${{ matrix.arch }}
          path: 'install/*.dylib'
